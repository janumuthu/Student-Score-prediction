# -*- coding: utf-8 -*-
"""SF-TASK1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcZqj9JymEXiAGDU6EnInxHtN3lJvc-x

# Graduate Rotational Internship Program @ The Sparks Foundation 
# Data Science and Business Analytics Intern

# Prediction using Supervised ML

## (Level - Beginner)

● Predict the percentage of an student based on the no. of study hours.

● This is a simple linear regression task as it involves just 2 variables.

 ● You can use R, Python, SAS Enterprise Miner or any other tool

 ● Data can be found at http://bit.ly/w-data

 ● What will be predicted score if a student studies for 9.25 hrs/ day?

# Author - Divya Janani.S

Supervised machine learning is a type of machine learning where a computer algorithm is trained using labelled input data and the computer, in turn, predicts the output for unforeseen data.
It is classified into two types - 1.Regression 2. Classification

In this problem we are using **SIMPLE LINEAR REGRESSION**. If a single independent variable is used to predict the value of a numerical dependent variable, then such a Linear Regression algorithm is called Simple Linear Regression.

# IMPORTING NECESSARY PYTHON LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

"""# LOADING THE DATASET"""

url="http://bit.ly/w-data"
df=pd.read_csv(url)
df.head()

"""# DATA PREPROCESSING"""

df.shape   # checking the shape(rows & columns)

df.columns    # checking the column names

df.isnull().sum() # checking for null values

df.duplicated().sum()     # checking for duplicate values

df.dtypes   # checking the type of data

df.describe()

df.corr()                  # checking the corelation between the features

"""# HEATMAP FOR CORRELATION"""

sns.heatmap(df.corr(),annot=True)
plt.title("Correlation Heatmap")
plt.show()

"""# VISUALIZATION - CHECKING FOR OUTLIERS IN THE DATASET"""

sns.boxplot(x='Hours', data=df)
plt.show()                                  # no outliers

sns.boxplot(x='Scores', data=df)
plt.show()                                 # no outliers

"""# VARIANT ANALYSIS"""

x=df['Hours']
y=df['Scores']
sns.scatterplot(x=x,y=y, color='blue',marker='*')
plt.show()

sns.set_palette(sns.color_palette("gist_rainbow"))
sns.pairplot(data=df)
plt.show()

"""# DIVIDING THE DATA INTO TEST AND TRAIN"""

x=df.iloc[:,:-1].values   # converting 1D array to 2D array
y=df.iloc[:,1].values

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

"""# IMPORTING AND FITTING THE DATA INTO THE LINEAR MODEL"""

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)

"""# PREDICTING THE MODEL"""

y_pred=model.predict(x_test)
y_pred

df_new=pd.DataFrame({'Actual': y_test,'Predicted': y_pred})
df_new.head()

"""# VISUALIZATION OF TRAINING AND TESTING DATA"""

plt.figure(figsize=(10,5))
plt.scatter(x_train,y_train,color='red',marker='D')
plt.plot(x_train,model.predict(x_train))
plt.title("Hours Vs Scores on Training DataSet")
plt.xlabel("Hours of Study")
plt.ylabel("Scores Obtained")
plt.show()

plt.figure(figsize=(10,5))
plt.scatter(x_test,y_test,color='purple',marker='*')
plt.plot(x_test,model.predict(x_test))
plt.title("Hours Vs Scores on Testing DataSet")
plt.xlabel("Hours of Study")
plt.ylabel("Scores Obtained")
plt.show()

"""# CHECKING THE MEAN SQUARE ERROR"""

from sklearn.metrics import mean_squared_error,mean_absolute_error
mse=mean_squared_error(y_test,y_pred)
mae=mean_absolute_error(y_test,y_pred)
print("Mean Square Error :",mse)
print("Mean Absolute Error :",mae)

"""# MEASURING THE ACCURACY OF THE MODEL"""

h=9.5
s=model.predict([[h]])
print("If a student studies for {} hours/day, the student will score {} % in the exam".format(h,s))

"""# SAVING THE DATA IN CSV FILE"""

df.to_csv("Student_Study_hours.csv")

"""# SAVING THE MODEL IN [PICKLE]"""

import pickle
filename = 'finalized_model'
pickle.dump(model, open(filename, 'wb'))